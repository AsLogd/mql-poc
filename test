function time_pass(mu, q, state) #{
	console.log("time pass")
	const dframes = state.frame - state.inRuleSince
	switch(mu) {
		case "frames":
			return dframes > q
		case "secs":
			return dframes/60 > q
	}
}#

function char_is_in_state_interval(c, lb, hb, state) #{
	const char = c.character
	console.log("is in interval", char.pre.frame)
	const lbId = state.constants.stateNames.findIndex(s => s.toLowerCase() === lb.val)
	const hbId = state.constants.stateNames.findIndex(s => s.toLowerCase() === hb.val)
	return lbId <= char.post.actionStateId 
		&& char.post.actionStateId <= hbId 
}#

sentence c:character is jumping = 
	char_is_in_state_interval($c, 'JumpF', 'JumpAerialB')

sentence s:number seconds pass =
	time_pass('secs', $s)

sentence c:character jumps =
	not $c is jumping then $c is jumping

verb log(results) #{
	if (results.target === "matches") {
		console.group("Found occurrences on the following files:")
		results.matches.forEach(res => 
			console.log(`-${res.file} at frame ${res.first_occurrence}`)
		)
		console.groupEnd()
	} else {
		console.group("Found occurrences on the following files:")
		results.matches.forEach(res => {
			console.group(`-${res.file} at intervals:`)
			console.log(res.intervals.reverse().reduce((pre, curr) =>
				curr[0] !== curr[1]
					? `[${curr[0]} (${curr[0]+123}), ${curr[1]} (${curr[1]+123})],\t${pre}`
					: `${curr[0]} (${curr[0]+123}),\t\t${pre}`
			, ""))
			console.groupEnd()

		})
		console.groupEnd()
	}
}#

log frames where "ganon" jumps
	then "ganon" jumps before 2 seconds pass
